---
title: "lab_2"
author: "natalie mayer"
format: 
  html:
    code-fold: show
    toc: true
    number-sections: true
editor: visual
execute:
  echo: true
  message: false
  warning: false
---

```{r setup}
library(tidyverse)
library(here)
library(tsibble)
library(feasts)
library(fable)
```

# Part 1: Time series with Toolik Lake data

## Always look at your data

### Read in the data

```{r}
toolik_df <- read_csv(here('data/toolik_daily.csv'))

### Convert data frame to time series

toolik_ts <- toolik_df %>%
  mutate(date = lubridate::mdy(date)) %>%
  as_tsibble(key = NULL, ### if we had multiple sites, key by site
             index = date) ### time series variable

ggplot(toolik_ts, aes(x=date, y=daily_air_temp)) +
  geom_line() + 
  labs(x= 'Date', 
       y= 'Mean daily air temp (Celsius)\n at Toolik Station')
```

## Use filter_index() function to filter by date and time

```{r}
### Filter from Dec 2010 to Jan 2011
toolik_ts %>%
  filter_index("2010-12" ~ "2011-01")

### Filter from April 10, 2006 to May 15, 2006
toolik_ts %>%
  filter_index("2006-04-10" ~ "2006-05-15")

### Filter from April 10, 2006 to present 
toolik_ts %>%
  filter_index("2006-04-10" ~ .) #period could also be first to start at beginning

```

## Use index_by() to aggregate time series by increments

```{r}
toolik_month <- toolik_ts %>%
  index_by(yr_mo = ~yearmonth(.)) %>% #can also do yearweek + others
  summarize(monthly_mean_temp = mean(daily_air_temp, na.rm = TRUE)) %>%
  ungroup()
```

Now let's plot that!

```{r}
ggplot(data= toolik_month, aes(x=yr_mo, y=monthly_mean_temp)) + 
  geom_line()

ggplot(toolik_month, aes(x= year(yr_mo), y= monthly_mean_temp)) +
  geom_line() +
  facet_wrap(~ month(yr_mo, label=TRUE)) +
  labs(x= "Year", 
       y= "Annual mean air temp (Celsius)", 
       title= "Toolik Station mean annual air temperature", 
       subtitle = "1988-2023", 
       caption = "<put citation here>")
```

# Part 2: Time series wrangling and forecasting

Energy usage by sector, in trillions of BTUs

```{r}
energy_df <- read_csv(here('data', 'energy.csv'))
```

### Analysis goals:

-   Examine patterns and trends in residential energy consumption over time
-   Predict what residential energy use patterns will look like over the next 5 years

### Pseudocode

-   convert to ts
-   filter residential sector
-   plot time and energy use
-   assess level, trend, seasonality
-   extrapolate data into next 5 years

```{r}
energy_ts <- energy_df %>%
  mutate(date = tsibble::yearmonth(yrmonth)) %>%
  as_tsibble(key = sector, 
             index = date)
```

```{r}
ggplot(energy_ts, aes(x=date, y=energy_total, color=sector)) + 
  geom_line() + 
  facet_wrap(~sector, ncol=1) + 
  labs(y= "Energy consumption by sector \n (Trillion BTUs)", 
       x= "Time")
```

* residential looks similar to commercial, with an upward trend at least for the first part, maybe leveling off or decreasing in recent years 
* seasonality- summer and winter peaks, summer peaks seem to be getting larger over time 


### season plot 

```{r}
energy_ts %>%
  filter(sector == 'residential') %>%
  gg_season(y= energy_total, pal= hcl.colors(n=9)) + 
  theme_light() + 
  labs(x= 'Month', 
       y= 'Residential energy consumption (trillion BTWU)')
```

### subseries plot

```{r}
energy_ts %>%
  gg_subseries(y= energy_total)
```

### decomposition

```{r}
### find the STL decomposition (seasonality, trend and loess... locally estimated scatterplot smoothing)

dcmp <- energy_ts %>%
  filter(sector == 'residential') %>%
  model(feasts::STL(energy_total ~ season(period = '1 year') +
                      trend(window = 25)))

components(dcmp) %>%
  autoplot()
```

### autocorrelation function

```{r}
energy_ts %>%
  filter(sector == 'residential') %>%
  ACF(energy_total) %>%
  autoplot()
```

## forecasting by holt winters exponential smoothing 

specify for each component, whether none ("N"), additive ("A"), or multiplicative ("M")

```{r}
### create a model 
energy_fit <- energy_ts %>%
  filter(sector == 'residential') %>%
  filter_index('2000-01' ~ .) %>%
  model(ets = ETS(energy_total ~ season(method="M") + trend(method="A")))

energy_forecast <- energy_fit %>%
  forecast(h= "5 years")

energy_forecast %>%
  autoplot(energy_ts)
```


```{r}
energy_predicted <- energy_fit %>%
  broom::augment()

ggplot(energy_predicted) +
  geom_line(aes(x= date, 
                y= energy_total)) + 
  geom_line(aes(x= date, 
                y= .fitted), 
                color= 'red', 
                alpha= .7)

ggplot(energy_predicted, aes(x= .resid)) + 
  geom_histogram()
```












